[{"uri":"https://Davenury.github.io/TW-tutorial/motivation/","title":"Motywacja","tags":[],"description":"","content":"Po co teoria współbieżności?  Przetwarzanie współbieżne jest obecnie podstawowym paradygmatem działania systemów komputerowych. Wyjątkami mogą być proste sterowniki wbudowane. Podstawowe cechy przetwarzania współbieżnego:  współdzielenie zasobów (systemy operacyjne) działanie w sieci komputerowej (przetwarzanie rozproszone) jednoczesne wykorzystanie wielu procesorów (przetwarzanie równoległe)   Wytwarzanie systemów współbieżnych nie daje się zautomatyzować w dostatecznym stopniu, w przeciwieństwie do tworzenia systemów sekwencyjnych.  Teoria współbieżności to część inżynierii oprogramowania, która pozwala zrozumieć istotę działania systemów współbieżnych. Dodatkowo wprowadza ich formalny opis oraz tworzy modele służące analizie i projektowaniu.\n Poziomy opisu modelowania i programowania systemów  Poziom rejestrów - zmiana stanu rejestru (to, co na pierwszych labach z mikroprocków) Poziom zmiennych - zmiana wartości Poziom funkcji - zmiana wartości parametru, wywołanie, powrót Poziom procesu - utworzenie, usunięcie zawieszenie, odwieszenie, wysłanie i odbiór komunikatu Poziom obiektów, komponentów, agentów - kreacja, destrukcja, wysłanie i odbiór komunikatu  Uwaga! Jeśli modelujemy coś współbieżnego, to nie patrzymy na poziom rejestrów i zmiennych (to by była mordęga, jak nauka do tego egzaminu\u0026hellip;).\n Semafory, bariery, monitory Ogólnie chodzi o to, żeby operacje na jakichś współdzielonych strukturach danych nie były wykonywane w tym samym czasie, bo robi to w chuja problemów (problem wyścigu, etc.).\nOperacja atomiczna - taka, że musi być wykonana w całości przez jedną jednostkę (na przykład proces), a w trakcie jej wykonywania nikt nie ma dostępu do tej struktury.\nOperacje na strukturze (P, V - zajęcie i zwolnienie semafora, wait, signal) są wzajemnie wykluczane.\nKomunikacja blokująca - synchronizacja w systemach z pamięcią lokalną i współdzieloną oraz w sieciowych środowiskach rozproszonych.\n Prymitywy komunikacyjne - funkcje działające w pamięci lokalnej sterujące działaniem jednostki przetwarzającej (procesu, itp.) Wysyłanie poprzez send (nieblokujące) lub bsend (blokujące). Obydwa przyjmują destination address oraz msg - wiadomość do wysłania. Odbieranie przez receive i breceive (analogicznie nieblokujące i blokujące). Przyjmują adres wysyłającego, wskaźnik na bufor, gdzie zapisać wiadomość. Receive przyjmuje dodatkowo trzeci argument, w którym zapisze, czy wiadomość przyszła (1), czy jednak nie (0). Jeśli w breceive nie nadejdzie komunikat, to funkcja zawiesza działanie jednostki, dopóki komunikat nie przyjdzie.  Przekazywanie komunikatów w pamięci dzielonej odbywa się za pośrednictwem skrzynki pocztowej, która jest dzielona przez jednostki korespondujące. Oczywiście operacje na tej skrzynce wzajemnie się wykluczają (nie można równocześnie wkładać do skrzynki i wyciągać z niej).\nW środowisku rozproszonym przekazywanie komunikatów realizują protokoły komunikacyjne. Wiadomości są lokalnie buforowane.\n"},{"uri":"https://Davenury.github.io/TW-tutorial/frog_eating/","title":"„Ale najpierw musimy połknąć żabę&#34;","tags":[],"description":"","content":""},{"uri":"https://Davenury.github.io/TW-tutorial/","title":"Home Page","tags":[],"description":"","content":"Disclaimer Niekiedy w nawiasie podaję podstawowe formy odmienionych słów. Jest to tylko po to, żeby ctrl+f lepiej działał. Przy różnych okazjach pisałem też, jak ja to rozumiem, więc jeśli zaburzy Ci to rozumienie tych zagadnień, możesz na spokojnie pominąć moje tłumaczenia (nie obiecuję też, że rozumiem je dobrze XD). W opracowaniu pojawia się też kilka przekleństw, ale mają one głównie na celu rozładować napięcie i trochę zmniejszyć dystans do tego przedmiotu, więc z góry za nie (nie) przepraszam. Opracowanie nie jest idealne, ale jedyne, jakie na razie powstało. Jeśli Ci nie odpowiada, pamiętaj, że zawsze są wspaniałe slajdy profesora.\n"},{"uri":"https://Davenury.github.io/TW-tutorial/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://Davenury.github.io/TW-tutorial/tags/","title":"Tags","tags":[],"description":"","content":""}]